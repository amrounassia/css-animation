// ---------------------------------------------
// Border-radius, with shorthand
// Usage: @include border-radius(10px 5px);
// Usage: @include border-radius(10px 2px 5px 20px);
// ---------------------------------------------

@mixin border-radius($radius: 5px) {
	@include prefix-selector(border-radius, $radius);
	@include prefix-selector(background-clip, padding);
}

// ---------------------------------------------
// CSS3 Transition 
// Using a Sass 'vararg' the three dots make sure 
// even comma separated values (like chaining CSS transitions) are passed along as one string
// Usage: @include transition(background 0.5s ease-out, color 0.3s ease-in);
// ---------------------------------------------

@mixin transition($val...) {
	@include prefix-selector(transition, $val);
}

// ---------------------------------------------
// Box-shadow
// Alas, we can't use the prefix-selector mixin here
// Usage: @include box-shadow(0, 10px, 5px, green);
// Usage: @include box-shadow(0, 10px, 5px, #888, 0.4, inset);
// ---------------------------------------------

@mixin box-shadow($x: 0, $y: 5px, $spread: 5px, $color: #000000, $alpha: 0.5, $inset:"") {
	// Check if CSS3 vendor prefixes are needed (see _config.scss)
	@if $experimental-support-vendor-prefixes {
		-webkit-box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
		   -moz-box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
		   	-ms-box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
		   	 -o-box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
	}

	// Normal W3C CSS3 variant	
	box-shadow: #{$inset} $x $y $spread transparentize($color, 1 - $alpha);
}

// ---------------------------------------------
// Helper mixin
// Vendor prefixes
// var $vendor-prefixes is listed in _config.scss
// Usage: @include prefix-selector(border-radius, 5px);
// ---------------------------------------------

@mixin prefix-selector($property, $value) { 
	// Check if CSS3 vendor prefixes are needed (see _config.scss)
	@if $experimental-support-vendor-prefixes {		
		@each $prefix in $vendor-prefixes {
			#{$prefix}#{$property}: #{$value};
		}
	}

	// Standard W3C CSS3 variant
	#{$property}: $value;
}

@mixin prefix-value($property, $value) {
	// Check if CSS3 vendor prefixes are needed (see _config.scss)
	@if $experimental-support-vendor-prefixes {	
		@each $prefix in $vendor-prefixes {
			#{$property}: #{$prefix}#{$value};
		}
	}

	// Standard W3C CSS3 variant
	#{$property}: $value;
}

// ---------------------------------------------
// Gradients
// Alas, we can't use the prefix-selector mixin here
// Usage: @include bg-linear-gradient(#333, #3456ba);
// ---------------------------------------------

@mixin bg-linear-gradient($color1: #ccc, $color2: #000) {
	background-color: $color2;

	// Check if CSS3 vendor prefixes are needed (see _config.scss)
	@if $experimental-support-vendor-prefixes {
		background-image: -webkit-gradient(linear, left top, left bottom, from($color1), to($color2));
		background-image: -webkit-linear-gradient(top, $color1, $color2);
		background-image:    -moz-linear-gradient(top, $color1, $color2);
		background-image:      -o-linear-gradient(top, $color1, $color2);
	}

	// Standard W3C CSS3 variant
	background-image: linear-gradient(to bottom, $color1, $color2);
}

// ---------------------------------------------
// Box-sizing
// Usage: @include box-sizing;
// Usage: @include box-sizing(content-box);
// ---------------------------------------------

@mixin box-sizing($method: border-box) {
	@include prefix-selector(box-sizing, $method);
}

// ---------------------------------------------
// Rotation
// Usage: @include rotate(23);
// ---------------------------------------------

@mixin rotate($deg: 0) {
	@include prefix-selector(transform, rotate(#{$deg}deg));
}

// ---------------------------------------------
// @font-face
// var $dir-font is listed in _config.scss
// Don't forget to add the proper mime-types 
// for these font files in the web server config
// Usage: @include font-face('Proxima Nova', 'proxima-nova-std-0384586', 400, 'normal');
// ---------------------------------------------

@mixin font-face($font-name, $font-file, $font-weight: 400, $font-style: 'normal') {
	@font-face {
	    font-family: '#{$font-name}';
	    src: url('#{$dir-font}/#{$font-file}.eot');
	    src: url('#{$dir-font}/#{$font-file}.eot?#iefix') format('embedded-opentype'),
	         url('#{$dir-font}/#{$font-file}.woff') format('woff'),
	         url('#{$dir-font}/#{$font-file}.ttf') format('truetype'),
	         url('#{$dir-font}/#{$font-file}.svg##{$font-file}') format('svg');
	    font-weight: $font-weight;
	    font-style: $font-style;	       
	}
}

// ---------------------------------------------
// Convert font-size from pixels to rem unit
// With pixel fallback for old web browsers
// Usage: @include font-size-rem(18);
// ---------------------------------------------

@mixin font-size-rem($size) {
	font-size: $size; // Fallback
	$remSize: $size / $font-default-size; // Font-size you set on the HTML tag, see _config.scss
	font-size: #{$remSize}rem;
}


// ---------------------------------------------
// Using a CSS3 MediaQuery for background images on 
// high-pixel-density screens or SVG
// Usage: @include background-adaptive(logo);
// Usage: @include background-adaptive(logo, png, 220px 40px, true);
// ---------------------------------------------

@mixin background-adaptive($file-name, $file-extension: 'png', $background-size: 100% 100%, $svg-version: false) {
	background-image: url($file-name + '.' + $file-extension);

  	// Target higher density screens
  	// By using a ratio of 1.5 instead of 2, 
  	// you can target other non-Apple devices with the same query.
  	@media 	(min--moz-device-pixel-ratio: 1.5),
  			(-o-min-device-pixel-ratio: 3/2),
  			(-webkit-min-device-pixel-ratio: 1.5),
  			(min-device-pixel-ratio: 1.5),
  			(min-resolution: 144dpi),
  			(min-resolution: 1.5dppx) {

			background-image: url($file-name + '@2x' + '.' + $file-extension);
			// background-size: $background-size;
			@include prefix-selector('background-size', $background-size);

		// Check if SVG version is needed
		@if $svg-version {
			.svg & {
				background-image: url($file-name + '.svg');
				background-size: $background-size;
		  	}
		}
  	}
}
